# -*- mode: ruby -*-
# vi: set ft=ruby :

##
# This will provision a couple of machines for a test cluster.
# One will act as zookeeper, master, db, scheduler, and web server.
# The other will be an execution slave.

SLAVE_RAM = 2048
SLAVE_CPUS = 4
NETWORK = "10.4.4."
NETMASK = "255.255.255.0"

HOSTS = {
   "scale-master" => [NETWORK+"10", 1024, 3],
   "scale-slave1" => [NETWORK+"20", SLAVE_RAM, SLAVE_CPUS],
   "scale-slave2" => [NETWORK+"21", SLAVE_RAM, SLAVE_CPUS],
}

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
   config.hostmanager.enabled = true
   config.hostmanager.manage_host = true
   config.hostmanager.ignore_private_ip = false
   config.hostmanager.include_offline = true

   HOSTS.each do | (name, cfg) |
     ipaddr, ram, cpus = cfg

     config.vm.define name do |machine|
       # centos7 with virtualbox guest additions
       machine.vm.box = "bings/centos-7-btrfs"

       # set machine's ram and cpu
       machine.vm.provider "virtualbox" do |vbox|
         vbox.memory = ram
         vbox.cpus = cpus
       end

       machine.vm.provider :aws do |aws, override|
         aws.access_key_id = ENV['AWS_KEY']
         aws.secret_access_key = ENV['AWS_SECRET']
         aws.keypair_name = ENV['AWS_KEYNAME']

         # AIS base Centos7 AMI: ami-a52071cf

         aws.ami = "ami-a52071cf"
         aws.region = "us-east-1"

         aws.instance_type = "m4.large"

         # request 50GB drive
         #aws.block_device_mapping = [
         #    {
         #       'DeviceName' => "/dev/sda1",
         #       'VirtualName' => "Root",
         #       'Ebs.VolumeSize' => "50",
         #       'Ebs.VolumeType' => "gp2",
         #       'Ebs.DeleteOnTermination' => true
         #     }
         # ]

         aws.tags = { 'Name' => name }
         aws.security_groups = [ "sg-f2ad6a8b" ]
         aws.subnet_id = "subnet-1642a73c"
         aws.private_ip_address = ipaddr
         aws.elastic_ip = true
         override.vm.box = "dummy"
         override.ssh.username = "vagrant"
         override.ssh.private_key_path = ENV['AWS_KEYPATH']
       end

       # setup network
       machine.vm.hostname = name
       machine.vm.network 'private_network', ip: ipaddr, netmask: NETMASK, :adapter => 2

       if name === "scale-master"
          machine.vm.synced_folder "..", "/scale/"
       end
     end

   end # HOSTS-each

   # run the ansible provisioner. rerun with "vagrant provision"
   config.vm.provision :ansible, run: "always" do |ansible|
     ansible.playbook = '../ansible/vagrant.yml'
     ansible.verbose = 'vv'
     ansible.groups = {
        'zookeeper' => ["scale-master"],
        'mesos-masters' => ["scale-master"],
        'mesos-slaves' => ["scale-slave1","scale-slave2"],
        'db' => ["scale-master"],
        'dns' => ["scale-master"],
        'nfs' => ["scale-master"],
        'registry' => ["scale-master"],
        'build' => ["scale-master"],
        'scale-scheduler' => ["scale-master"],
        'scale-web' => ["scale-master"],
        'mesos:children' => ["mesos-masters", "mesos-slaves"],
        'scale-framework:children' => ["scale-scheduler", "scale-web"],
        'vagrant' => ["scale-master", "scale-slave1", "scale-slave2"]
     }
   end
end
